მოკლედ რა ხდება ამ აპლიკაციაში.

    გვაქ უბრალო აპლიკაცია სადაც იუზერს შეუძლია დაამატოს პოსტები დაწეროს კომენტარი და პოსტის ავტორს მისდის შეტყობინება
    იმაზე თუ ვინ დაწერა კომენტარი და რომელ პოსტზე, ასევე როდესაც მოდის შეტყობინება მას აქვს ხმა.
    როდესაც იუზერი კომენტარს დაწერს სიგნალი ავტომატურად ქმნის შეტყობინებას პოსტის ავორისთვის, ეს შეტყობინება მიდის
    ვებსოქეთთან და ვებსოქეთი ამ შეტყობინებას გზავნის უკან.


გადმოვწეროთ რაც საჭიროა

    pip install channels-redis

    channels ვიწერთ ასე
    python -m pip install -U 'channels[daphne]'

უნდა დავამატოთ რაღაცები settings.py ფაილში

    # Add Channels to INSTALLED_APPS
    INSTALLED_APPS = [
        "daphne", ამას ვწერთ ყველაზე მაღლა
    ]

    # Configure Channels
    ASGI_APPLICATION = 'your_project_name.asgi.application'  # Replace with your project name

    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [('127.0.0.1', 6379)],
            },
        },
    }

ასევე უნდა დავამატოთ რაღაცები asgi.py ფაილში

    import os
    from django.core.asgi import get_asgi_application
    from channels.routing import ProtocolTypeRouter, URLRouter
    from channels.auth import AuthMiddlewareStack
    from your_app_name.routing import websocket_urlpatterns

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project_name.settings')

    application = ProtocolTypeRouter({
        "http": get_asgi_application(),
        "websocket": AuthMiddlewareStack(
            URLRouter(
                websocket_urlpatterns
            )
        ),
    })

შევქმნათ routing.py ფაილი

    from django.urls import path
    from .consumers import NotificationConsumer

    websocket_urlpatterns = [
        path('ws/notifications/', NotificationConsumer.as_asgi()),
    ]

შევქმნათ consumers.py ფაილი

    import json
    from channels.generic.websocket import AsyncWebsocketConsumer
    from channels.db import database_sync_to_async
    from .models import Notification

    class NotificationConsumer(AsyncWebsocketConsumer):
        async def connect(self):
            # Each user has a unique notification group
            self.group_name = f"notifications_{self.scope['user'].id}"
            await self.channel_layer.group_add(self.group_name, self.channel_name)
            await self.accept()

        async def disconnect(self, close_code):
            await self.channel_layer.group_discard(self.group_name, self.channel_name)

        async def send_notification(self, event):
            notification = event['notification']
            await self.send(text_data=json.dumps(notification))

მოდელები რა თქმა უნდა

    from django.db import models
    from django.contrib.auth.models import User

    class Post(models.Model):
        title = models.CharField(max_length=200)
        content = models.TextField()
        author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='posts')

    class Comment(models.Model):
        post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')
        user = models.ForeignKey(User, on_delete=models.CASCADE)
        content = models.TextField()

    class Notification(models.Model):
        recipient = models.ForeignKey(User, on_delete=models.CASCADE, related_name='notifications')
        sender = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sent_notifications')
        message = models.CharField(max_length=255)
        post = models.ForeignKey('Post', on_delete=models.CASCADE, null=True, blank=True)
        is_read = models.BooleanField(default=False)
        timestamp = models.DateTimeField(auto_now_add=True)

view.py ფაილი

    from django.shortcuts import render, get_object_or_404, redirect
    from django.views.generic import ListView, DetailView, View
    from django.contrib.auth.mixins import LoginRequiredMixin
    from django.http import JsonResponse
    from .models import Post, Comment, Notification
    from .forms import CommentForm

    class PostListView(ListView):
        model = Post
        template_name = 'sendNotification/post_list.html'
        context_object_name = 'posts'

        def get_context_data(self, **kwargs: Any) -> dict[str, Any]:
            context = super().get_context_data( **kwargs)
            context['notification'] = self.request.user.notifications.filter(is_read=False)
            return context

    class PostDetailView(DetailView):
        model = Post
        template_name = 'sendNotification/post_detail.html'

        def get_context_data(self, **kwargs):
            context = super().get_context_data(**kwargs)
            context['form'] = CommentForm()
            return context

    class AddCommentView(LoginRequiredMixin, View):
        def post(self, request, *args, **kwargs):
            post = get_object_or_404(Post, id=kwargs.get('pk'))
            form = CommentForm(request.POST)
            if form.is_valid():
                comment = form.save(commit=False)
                comment.post = post
                comment.user = request.user
                comment.save()  # Triggers the post_save signal for notifications
                return redirect('post-detail', pk=post.id)
            return JsonResponse({'error': 'Invalid form submission'}, status=400)

    @login_required
    def get_notifications(request):
        notifications = request.user.notifications.filter(is_read=False)
        notifications_list = [
            {
                'message': n.message,
                'timestamp': n.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                'post_id': n.post.id
            }
            for n in notifications
        ]
        return JsonResponse({'notifications': notifications_list})

forms.py ფაილი

    from django import forms
    from .models import Comment

    class CommentForm(forms.ModelForm):
        class Meta:
            model = Comment
            fields = ['content']

signals.py file

    from django.db.models.signals import post_save
    from django.dispatch import receiver
    from channels.layers import get_channel_layer
    from asgiref.sync import async_to_sync
    from .models import Comment, Notification

    @receiver(post_save, sender=Comment)
    def notify_user_on_comment(sender, instance, created, **kwargs):
        if created:
            notification = Notification.objects.create(
                recipient=instance.post.author,
                sender=instance.user,
                message=f"{instance.user} commented on your post",
                post=instance.post
            )
            
            # Send notification to WebSocket
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                f"notifications_{instance.post.author.id}",
                {
                    'type': 'send_notification',
                    'notification': {
                        'message': notification.message,
                        'timestamp': notification.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                        'post_id': instance.post.id
                    }
                }
            )

ეს არის html სადაც მოდის შტყობინებები

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Posts</title>
        <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    </head>
    <body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="{% url 'post-list' %}">Blog</a>
        <ul class="navbar-nav ml-auto">
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="notificationsDropdown" data-toggle="dropdown">Notifications</a>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="notificationsDropdown" id="notificationsMenu">
                    <p class="dropdown-item">Loading...</p>
                </div>
            </li>
        </ul>
    </nav>

    <div class="container mt-4">
        <h1>Posts</h1>
        <div class="row">
            {% for post in posts %}
            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">{{ post.title }}</h5>
                        <p class="card-text">{{ post.content }}</p>
                        <a href="{% url 'post-detail' post.id %}" class="btn btn-primary">View Post</a>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>

            const notificationsMenu = $("#notificationsMenu");
            const notificationsDropdown = $("#notificationsDropdown");
            const notificationSound = document.getElementById("notificationSound");

            const ws = new WebSocket(
                `ws://${window.location.host}/ws/notifications/`
            );

            ws.onmessage = function (e) {
                try {
                const notification = JSON.parse(e.data);

                // Prepend the new notification to the dropdown menu
                notificationsMenu.prepend(
                    `<a href="http://127.0.0.1:8000/post/${notification.post_id}/" class="dropdown-item">${notification.message} - ${notification.timestamp}</a>`
                );

                // Play the notification sound
                notificationSound.play();

                // Automatically show the dropdown if it's not already open
                if (!notificationsDropdown.parent().hasClass("show")) {
                    notificationsDropdown.dropdown("show");
                }
                } catch (error) {
                console.error("Error processing WebSocket message:", error);
                }
            };
    </script>
    </body>
    </html>

ეს არის html იმისთვის რომ კომენტარი შევქმნათ

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Post Detail</title>
        <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    </head>
    <body>
    <div class="container mt-4">
        <h1>{{ object.title }}</h1>
        <p>{{ object.content }}</p>
        <hr>
        <h4>Comments</h4>
        {% for comment in object.comments.all %}
        <div class="card mb-2">
            <div class="card-body">
                <p>{{ comment.user }}: {{ comment.content }}</p>
            </div>
        </div>
        {% endfor %}
        <hr>
        <form method="post">
            {% csrf_token %}
            {{ form.as_p }}
            <button type="submit" class="btn btn-primary">Add Comment</button>
        </form>
    </div>
    </body>
    </html>